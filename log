Exception in thread Thread-6:
Traceback (most recent call last):
  File "/Users/alun/Projects/fxbtcjpy-data-getter/fxbtcjpy-data-getter/lib/python3.6/site-packages/websocket/_app.py", line 305, in run_forever
    dispatcher.read(self.sock.sock, read, check)
  File "/Users/alun/Projects/fxbtcjpy-data-getter/fxbtcjpy-data-getter/lib/python3.6/site-packages/websocket/_app.py", line 66, in read
    if not read_callback():
  File "/Users/alun/Projects/fxbtcjpy-data-getter/fxbtcjpy-data-getter/lib/python3.6/site-packages/websocket/_app.py", line 271, in read
    op_code, frame = self.sock.recv_data_frame(True)
  File "/Users/alun/Projects/fxbtcjpy-data-getter/fxbtcjpy-data-getter/lib/python3.6/site-packages/websocket/_core.py", line 343, in recv_data_frame
    frame = self.recv_frame()
  File "/Users/alun/Projects/fxbtcjpy-data-getter/fxbtcjpy-data-getter/lib/python3.6/site-packages/websocket/_core.py", line 377, in recv_frame
    return self.frame_buffer.recv_frame()
  File "/Users/alun/Projects/fxbtcjpy-data-getter/fxbtcjpy-data-getter/lib/python3.6/site-packages/websocket/_abnf.py", line 383, in recv_frame
    frame.validate(self.skip_utf8_validation)
  File "/Users/alun/Projects/fxbtcjpy-data-getter/fxbtcjpy-data-getter/lib/python3.6/site-packages/websocket/_abnf.py", line 182, in validate
    raise WebSocketProtocolException("Invalid close opcode.")
websocket._exceptions.WebSocketProtocolException: Invalid close opcode.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/alun/.pyenv/versions/3.6.3/lib/python3.6/inspect.py", line 1116, in getfullargspec
    sigcls=Signature)
  File "/Users/alun/.pyenv/versions/3.6.3/lib/python3.6/inspect.py", line 2192, in _signature_from_callable
    sigcls=sigcls)
  File "/Users/alun/.pyenv/versions/3.6.3/lib/python3.6/inspect.py", line 2262, in _signature_from_callable
    skip_bound_arg=skip_bound_arg)
  File "/Users/alun/.pyenv/versions/3.6.3/lib/python3.6/inspect.py", line 2087, in _signature_from_builtin
    raise ValueError("no signature found for builtin {!r}".format(func))
ValueError: no signature found for builtin CPUDispatcher(<function WebsocketMaster.on_close at 0x111a34268>)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/alun/.pyenv/versions/3.6.3/lib/python3.6/threading.py", line 916, in _bootstrap_inner
    self.run()
  File "/Users/alun/.pyenv/versions/3.6.3/lib/python3.6/threading.py", line 864, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/alun/Projects/fxbtcjpy-data-getter/DataGetter.py", line 32, in <lambda>
    self.thread = threading.Thread(target=lambda: self.ws.run_forever())
  File "/Users/alun/Projects/fxbtcjpy-data-getter/fxbtcjpy-data-getter/lib/python3.6/site-packages/websocket/_app.py", line 311, in run_forever
    teardown()
  File "/Users/alun/Projects/fxbtcjpy-data-getter/fxbtcjpy-data-getter/lib/python3.6/site-packages/websocket/_app.py", line 237, in teardown
    close_frame.data if close_frame else None)
  File "/Users/alun/Projects/fxbtcjpy-data-getter/fxbtcjpy-data-getter/lib/python3.6/site-packages/websocket/_app.py", line 329, in _get_close_args
    if not self.on_close or len(inspect.getfullargspec(self.on_close).args) != 3:
  File "/Users/alun/.pyenv/versions/3.6.3/lib/python3.6/inspect.py", line 1122, in getfullargspec
    raise TypeError('unsupported callable') from ex
TypeError: unsupported callable









import websocket
import threading
import time
import json
import asyncio
from datetime import datetime
from LineNotification import LineNotification
from numba import jit
import pandas as pd
from DataSave import DataSave
import os


class WebsocketMaster:
    def __init__(self, channel, symbol=''):
        self.symbol = symbol
        self.ticker = None
        self.message = None
        self.exection = None
        self.channel = channel
        self.connect()
        self.time_start = time.time()

    def connect(self):
        self.ws = websocket.WebSocketApp(
            'wss://ws.lightstream.bitflyer.com/json-rpc', header=None,
            on_open = self.on_open, on_message = self.on_message,
            on_error = self.on_error, on_close = self.on_close)
        self.ws.keep_running = True
        websocket.enableTrace(False)
        #self.thread = threading.Thread(target=lambda: self.ws.run_forever(sslopt={"cert_reqs": ssl.CERT_NONE}))
        self.thread = threading.Thread(target=lambda: self.ws.run_forever())
        self.thread.daemon = True
        self.thread.start()

    def is_connected(self):
        return self.ws.sock and self.ws.sock.connected

    def disconnect(self):
        print('disconnected')
        self.ws.keep_running = False
        self.ws.close()


    '''
    lightning_executions_
    [{'id': 1046951795, 'side': 'SELL', 'price': 654622, 'size': 0.1, 'exec_date': '2019-05-07T12:03:23.1848477Z', 'buy_child_order_acceptance_id': 'JRF20190507-120321-516068', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}, {'id': 1046951796, 'side': 'SELL', 'price': 654614, 'size': 0.034, 'exec_date': '2019-05-07T12:03:23.1848477Z', 'buy_child_order_acceptance_id': 'JRF20190507-120321-279674', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}, {'id': 1046951797, 'side': 'SELL', 'price': 654613, 'size': 0.01, 'exec_date': '2019-05-07T12:03:23.1848477Z', 'buy_child_order_acceptance_id': 'JRF20190507-120321-172141', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}, {'id': 1046951798, 'side': 'SELL', 'price': 654613, 'size': 0.01, 'exec_date': '2019-05-07T12:03:23.1848477Z', 'buy_child_order_acceptance_id': 'JRF20190507-120321-785127', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}, {'id': 1046951799, 'side': 'SELL', 'price': 654613, 'size': 0.02, 'exec_date': '2019-05-07T12:03:23.1848477Z', 'buy_child_order_acceptance_id': 'JRF20190507-120321-007355', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}, {'id': 1046951800, 'side': 'SELL', 'price': 654612, 'size': 0.01, 'exec_date': '2019-05-07T12:03:23.1848477Z', 'buy_child_order_acceptance_id': 'JRF20190507-120321-172142', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}, {'id': 1046951801, 'side': 'SELL', 'price': 654611, 'size': 0.05, 'exec_date': '2019-05-07T12:03:23.1848477Z', 'buy_child_order_acceptance_id': 'JRF20190507-120321-402171', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}, {'id': 1046951802, 'side': 'SELL', 'price': 654609, 'size': 0.02, 'exec_date': '2019-05-07T12:03:23.1848477Z', 'buy_child_order_acceptance_id': 'JRF20190507-120321-279677', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}, {'id': 1046951803, 'side': 'SELL', 'price': 654604, 'size': 0.13673, 'exec_date': '2019-05-07T12:03:23.1848477Z', 'buy_child_order_acceptance_id': 'JRF20190507-120320-007353', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}, {'id': 1046951804, 'side': 'SELL', 'price': 654603, 'size': 0.02, 'exec_date': '2019-05-07T12:03:23.1848477Z', 'buy_child_order_acceptance_id': 'JRF20190507-120321-353741', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}, {'id': 1046951805, 'side': 'SELL', 'price': 654602, 'size': 0.6, 'exec_date': '2019-05-07T12:03:23.1848477Z', 'buy_child_order_acceptance_id': 'JRF20190507-120321-167508', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}, {'id': 1046951806, 'side': 'SELL', 'price': 654600, 'size': 0.2, 'exec_date': '2019-05-07T12:03:23.1848477Z', 'buy_child_order_acceptance_id': 'JRF20190507-120322-681289', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}, {'id': 1046951807, 'side': 'SELL', 'price': 654597, 'size': 0.2, 'exec_date': '2019-05-07T12:03:23.1848477Z', 'buy_child_order_acceptance_id': 'JRF20190507-120321-066965', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}, {'id': 1046951808, 'side': 'SELL', 'price': 654596, 'size': 0.08, 'exec_date': '2019-05-07T12:03:23.1848477Z', 'buy_child_order_acceptance_id': 'JRF20190507-120321-279681', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}, {'id': 1046951809, 'side': 'SELL', 'price': 654595, 'size': 0.08, 'exec_date': '2019-05-07T12:03:23.1848477Z', 'buy_child_order_acceptance_id': 'JRF20190507-120321-516060', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}, {'id': 1046951810, 'side': 'SELL', 'price': 654593, 'size': 0.01, 'exec_date': '2019-05-07T12:03:23.1848477Z', 'buy_child_order_acceptance_id': 'JRF20190507-120321-402169', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}]
    [{'id': 1046951811, 'side': 'SELL', 'price': 654593, 'size': 0.17615827, 'exec_date': '2019-05-07T12:03:23.1848477Z', 'buy_child_order_acceptance_id': 'JRF20190507-120322-007388', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}, {'id': 1046951812, 'side': 'SELL', 'price': 654589, 'size': 0.01, 'exec_date': '2019-05-07T12:03:23.1848477Z', 'buy_child_order_acceptance_id': 'JRF20190507-120321-282936', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}, {'id': 1046951813, 'side': 'SELL', 'price': 654584, 'size': 0.05, 'exec_date': '2019-05-07T12:03:23.1848477Z', 'buy_child_order_acceptance_id': 'JRF20190507-120321-279680', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}, {'id': 1046951814, 'side': 'SELL', 'price': 654584, 'size': 0.2, 'exec_date': '2019-05-07T12:03:23.1848477Z', 'buy_child_order_acceptance_id': 'JRF20190507-120321-066973', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}, {'id': 1046951815, 'side': 'SELL', 'price': 654583, 'size': 0.01, 'exec_date': '2019-05-07T12:03:23.1848477Z', 'buy_child_order_acceptance_id': 'JRF20190507-120321-516069', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}, {'id': 1046951816, 'side': 'SELL', 'price': 654582, 'size': 0.01, 'exec_date': '2019-05-07T12:03:23.1848477Z', 'buy_child_order_acceptance_id': 'JRF20190507-120310-785048', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}, {'id': 1046951817, 'side': 'SELL', 'price': 654576, 'size': 0.01, 'exec_date': '2019-05-07T12:03:23.1848477Z', 'buy_child_order_acceptance_id': 'JRF20190507-120314-402105', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}, {'id': 1046951818, 'side': 'SELL', 'price': 654574, 'size': 0.06791747, 'exec_date': '2019-05-07T12:03:23.1848477Z', 'buy_child_order_acceptance_id': 'JRF20190507-120310-279589', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}, {'id': 1046951819, 'side': 'SELL', 'price': 654574, 'size': 0.01, 'exec_date': '2019-05-07T12:03:23.1848477Z', 'buy_child_order_acceptance_id': 'JRF20190507-120318-007328', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}, {'id': 1046951820, 'side': 'SELL', 'price': 654573, 'size': 0.2, 'exec_date': '2019-05-07T12:03:23.1848477Z', 'buy_child_order_acceptance_id': 'JRF20190507-120315-007284', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}, {'id': 1046951821, 'side': 'SELL', 'price': 654571, 'size': 0.05, 'exec_date': '2019-05-07T12:03:23.1848477Z', 'buy_child_order_acceptance_id': 'JRF20190507-120310-007231', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}, {'id': 1046951822, 'side': 'SELL', 'price': 654570, 'size': 0.2, 'exec_date': '2019-05-07T12:03:23.1848477Z', 'buy_child_order_acceptance_id': 'JRF20190507-120310-390157', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}, {'id': 1046951823, 'side': 'SELL', 'price': 654565, 'size': 0.03181892, 'exec_date': '2019-05-07T12:03:23.2004712Z', 'buy_child_order_acceptance_id': 'JRF20190507-120321-007373', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681291'}, {'id': 1046951824, 'side': 'SELL', 'price': 654565, 'size': 0.04818108, 'exec_date': '2019-05-07T12:03:23.2004712Z', 'buy_child_order_acceptance_id': 'JRF20190507-120321-007373', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681293'}, {'id': 1046951825, 'side': 'SELL', 'price': 654560, 'size': 0.45181892, 'exec_date': '2019-05-07T12:03:23.2004712Z', 'buy_child_order_acceptance_id': 'JRF20190507-120322-167519', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681293'}]
    [{'id': 1046951826, 'side': 'SELL', 'price': 654560.0, 'size': 0.02, 'exec_date': '2019-05-07T12:03:23.3275613Z', 'buy_child_order_acceptance_id': 'JRF20190507-120322-167519', 'sell_child_order_acceptance_id': 'JRF20190507-120323-767279'}, {'id': 1046951827, 'side': 'SELL', 'price': 654604.0, 'size': 0.5, 'exec_date': '2019-05-07T12:03:23.4838055Z', 'buy_child_order_acceptance_id': 'JRF20190507-120323-033055', 'sell_child_order_acceptance_id': 'JRF20190507-120323-032026'}, {'id': 1046951828, 'side': 'SELL', 'price': 654604.0, 'size': 0.02, 'exec_date': '2019-05-07T12:03:23.5150556Z', 'buy_child_order_acceptance_id': 'JRF20190507-120323-033055', 'sell_child_order_acceptance_id': 'JRF20190507-120323-172154'}, {'id': 1046951829, 'side': 'BUY', 'price': 654631.0, 'size': 0.259, 'exec_date': '2019-05-07T12:03:23.7494228Z', 'buy_child_order_acceptance_id': 'JRF20190507-120323-681296', 'sell_child_order_acceptance_id': 'JRF20190507-120323-007393'}, {'id': 1046951830, 'side': 'BUY', 'price': 654657.0, 'size': 0.05, 'exec_date': '2019-05-07T12:03:23.7494228Z', 'buy_child_order_acceptance_id': 'JRF20190507-120323-681296', 'sell_child_order_acceptance_id': 'JRF20190507-120323-767280'}, {'id': 1046951831, 'side': 'BUY', 'price': 654729.0, 'size': 0.07615942, 'exec_date': '2019-05-07T12:03:23.7494228Z', 'buy_child_order_acceptance_id': 'JRF20190507-120323-681296', 'sell_child_order_acceptance_id': 'JRF20190507-120323-516087'}, {'id': 1046951832, 'side': 'BUY', 'price': 654731.0, 'size': 0.07615942, 'exec_date': '2019-05-07T12:03:23.7494228Z', 'buy_child_order_acceptance_id': 'JRF20190507-120323-681296', 'sell_child_order_acceptance_id': 'JRF20190507-120323-007394'}, {'id': 1046951833, 'side': 'BUY', 'price': 654742.0, 'size': 0.11, 'exec_date': '2019-05-07T12:03:23.7494228Z', 'buy_child_order_acceptance_id': 'JRF20190507-120323-681296', 'sell_child_order_acceptance_id': 'JRF20190507-120323-066979'}, {'id': 1046951834, 'side': 'BUY', 'price': 654747.0, 'size': 0.091, 'exec_date': '2019-05-07T12:03:23.7494228Z', 'buy_child_order_acceptance_id': 'JRF20190507-120323-681296', 'sell_child_order_acceptance_id': 'JRF20190507-120323-681294'}, {'id': 1046951835, 'side': 'BUY', 'price': 654750.0, 'size': 0.2, 'exec_date': '2019-05-07T12:03:23.7650461Z', 'buy_child_order_acceptance_id': 'JRF20190507-120323-681296', 'sell_child_order_acceptance_id': 'JRF20190507-120323-167525'}, {'id': 1046951836, 'side': 'BUY', 'price': 654763.0, 'size': 2.77615942, 'exec_date': '2019-05-07T12:03:23.7650461Z', 'buy_child_order_acceptance_id': 'JRF20190507-120323-681296', 'sell_child_order_acceptance_id': 'JRF20190507-120322-007379'}, {'id': 1046951837, 'side': 'BUY', 'price': 654764.0, 'size': 0.264, 'exec_date': '2019-05-07T12:03:23.7650461Z', 'buy_child_order_acceptance_id': 'JRF20190507-120323-681296', 'sell_child_order_acceptance_id': 'JRF20190507-120323-066978'}, {'id': 1046951838, 'side': 'BUY', 'price': 654766.0, 'size': 0.06, 'exec_date': '2019-05-07T12:03:23.7650461Z', 'buy_child_order_acceptance_id': 'JRF20190507-120323-681296', 'sell_child_order_acceptance_id': 'JRF20190507-120323-516088'}, {'id': 1046951839, 'side': 'BUY', 'price': 654769.0, 'size': 0.11725038, 'exec_date': '2019-05-07T12:03:23.7650461Z', 'buy_child_order_acceptance_id': 'JRF20190507-120323-681296', 'sell_child_order_acceptance_id': 'JRF20190507-120322-353751'}, {'id': 1046951840, 'side': 'BUY', 'price': 654769.0, 'size': 0.2, 'exec_date': '2019-05-07T12:03:23.7650461Z', 'buy_child_order_acceptance_id': 'JRF20190507-120323-681296', 'sell_child_order_acceptance_id': 'JRF20190507-120322-646397'}, {'id': 1046951841, 'side': 'BUY', 'price': 654776.0, 'size': 3.72027136, 'exec_date': '2019-05-07T12:03:23.7650461Z', 'buy_child_order_acceptance_id': 'JRF20190507-120323-681296', 'sell_child_order_acceptance_id': 'JRF20190507-120322-402189'}]
    [{'id': 1046951842, 'side': 'BUY', 'price': 654643.0, 'size': 0.1, 'exec_date': '2019-05-07T12:03:23.9077646Z', 'buy_child_order_acceptance_id': 'JRF20190507-120323-033069', 'sell_child_order_acceptance_id': 'JRF20190507-120323-402203'}, {'id': 1046951843, 'side': 'BUY', 'price': 654643.0, 'size': 0.1, 'exec_date': '2019-05-07T12:03:23.9077646Z', 'buy_child_order_acceptance_id': 'JRF20190507-120323-390231', 'sell_child_order_acceptance_id': 'JRF20190507-120323-402203'}, {'id': 1046951844, 'side': 'BUY', 'price': 654643.0, 'size': 0.03, 'exec_date': '2019-05-07T12:03:24.0952599Z', 'buy_child_order_acceptance_id': 'JRF20190507-120323-681297', 'sell_child_order_acceptance_id': 'JRF20190507-120323-402203'}, {'id': 1046951845, 'side': 'BUY', 'price': 654643.0, 'size': 0.1, 'exec_date': '2019-05-07T12:03:24.2536212Z', 'buy_child_order_acceptance_id': 'JRF20190507-120324-681298', 'sell_child_order_acceptance_id': 'JRF20190507-120323-402203'}, {'id': 1046951846, 'side': 'BUY', 'price': 654643.0, 'size': 0.17, 'exec_date': '2019-05-07T12:03:24.2848715Z', 'buy_child_order_acceptance_id': 'JRF20190507-120324-066980', 'sell_child_order_acceptance_id': 'JRF20190507-120323-402203'}, {'id': 1046951847, 'side': 'BUY', 'price': 654687.0, 'size': 0.13, 'exec_date': '2019-05-07T12:03:24.2848715Z', 'buy_child_order_acceptance_id': 'JRF20190507-120324-066980', 'sell_child_order_acceptance_id': 'JRF20190507-120324-167526'}]
    '''
    '''
    lightning_ticker_
    {'product_code': 'FX_BTC_JPY', 'timestamp': '2019-05-07T12:25:52.2457622Z', 'tick_id': 45113277, 'best_bid': 654499.0, 'best_ask': 654544.0, 'best_bid_size': 0.786, 'best_ask_size': 0.0339062, 'total_bid_depth': 7917.99116313, 'total_ask_depth': 7520.12259162, 'ltp': 654544.0, 'volume': 484127.17608082, 'volume_by_product': 484127.17608082}
    {'product_code': 'FX_BTC_JPY', 'timestamp': '2019-05-07T12:25:52.8142083Z', 'tick_id': 45113364, 'best_bid': 654502.0, 'best_ask': 654622.0, 'best_bid_size': 0.09, 'best_ask_size': 0.24730589, 'total_bid_depth': 7913.28127613, 'total_ask_depth': 7504.00780466, 'ltp': 654634.0, 'volume': 484136.69094562, 'volume_by_product': 484136.69094562}
    {'product_code': 'FX_BTC_JPY', 'timestamp': '2019-05-07T12:25:54.3482242Z', 'tick_id': 45113515, 'best_bid': 654588.0, 'best_ask': 654622.0, 'best_bid_size': 0.00995455, 'best_ask_size': 0.17958601, 'total_bid_depth': 7912.32113241, 'total_ask_depth': 7516.2925372, 'ltp': 654622.0, 'volume': 484133.15209096, 'volume_by_product': 484133.15209096}
    '''

    @jit
    def on_message(self, ws, message):
        message = json.loads(message)['params']
        self.message = message['message']
        if self.channel == 'lightning_executions_':
            if self.message is not None:
                self.exection = self.message
                TickData.add_exec_data(self.exection)
                pass
        elif self.channel == 'lightning_ticker_':
            if self.message is not None:
                self.ticker = self.message
                TickData.add_ticker_data(self.ticker)
                pass

    @jit
    def on_error(self, ws, error):
        print('websocket error!')
        LineNotification.send_error('Data getter - websocket error!')
        try:
            if self.is_connected():
                self.disconnect()
        except Exception as e:
            print('websocket - '+str(e))
            LineNotification.send_error(str(e))
        time.sleep(3)
        self.connect()

    @jit
    def on_close(self, ws):
        print('Websocket disconnected')

    @jit
    def on_open(self, ws):
        ws.send(json.dumps( {'method':'subscribe',
            'params':{'channel':self.channel + self.symbol}} ))
        time.sleep(1)
        print('Websocket connected for '+self.channel)
        LineNotification.send_error('Data getter -'+'Websocket connected for '+self.channel)



class TickData:
    @classmethod
    def initialize(cls,sec_data_save):
        cls.lock = threading.Lock()
        LineNotification.initialize()
        #cls.ws_execution = WebsocketMaster('lightning_executions_', 'FX_BTC_JPY')
        cls.ws_ticker = WebsocketMaster('lightning_ticker_', 'FX_BTC_JPY')
        cls.exec_data = []
        cls.ticker_data = []
        DataSave.initialize()
        th = threading.Thread(target=cls.start_thread(sec_data_save))
        th.start()


    @classmethod
    def start_thread(cls, sec_data_save):
        LineNotification.send_error('Data Getter started.')
        num_exec = 0
        num_exec_list = []
        while True:
            time.sleep(sec_data_save)
            DataSave.remove_log_files()
            with cls.lock:
                if len(cls.ticker_data) > 0:
                    cls.__save_tick_data()
                else:
                    print(len(cls.ticker_data))
                    print(cls.ticker_data)
            cls.__check_thread_status()
        LineNotification.send_error('Data Getter loop finished')


    @classmethod
    def __generate_tick_data_df(cls):
        dt = list([d.get('timestamp') for d in cls.ticker_data])
        ltp = list([d.get('ltp') for d in cls.ticker_data])
        volume = list([d.get('volume') for d in cls.ticker_data])
        df = pd.DataFrame()
        df = df.assign(timestamp=dt)
        df = df.assign(ltp=ltp)
        df = df.assign(volume=volume)
        cls.ticker_data = []
        return df

    @classmethod
    def __save_tick_data(cls):
        try:
            df = cls.__generate_tick_data_df()
            #file_name = str(df['timestamp'][0]) +" - "+str(df['timestamp'][-1])+'.csv'
            file_name = str(int(datetime.now().timestamp()))+'.csv'
            df.to_csv('./'+file_name)
            DataSave.save_file(file_name)
            os.remove('./'+file_name)
            DataSave.remove_log_files()
        except Exception as e:
            print('data getter save tick data error- '+str(e))
            LineNotification.send_error('data getter save tick data error - '+str(e))


    @classmethod
    def __check_thread_status(cls):
        #if cls.ws_execution.is_connected == False:
        #    cls.ws_execution.connect()
        if cls.ws_ticker.is_connected == False:
            cls.ws_ticker.connect()

    @classmethod
    def add_exec_data(cls, exec):
        with cls.lock:
            if len(exec) > 0:
                cls.exec_data.extend(exec)
                #if len(cls.exec_data) >= 30000:
                #    del cls.exec_data[:-10000]


    @classmethod
    def add_ticker_data(cls, ticker):
        with cls.lock:
            if len(ticker) is not None:
                cls.ticker_data.append(ticker)
                #if len(cls.ticker_data) >= 30000:
                #    del cls.ticker_data[:-10000]



if __name__ == '__main__':
    TickData.initialize(3600)

