'''
normal BP LGB learning
'''

import time
futurel_kijun = 3000
sim_pl = 100000
future_period = 30
num_term = 100
window_term = 10
pl = 10000
ls = 1000
pred_kijun = 0.9
upper_kijun = 0.9
lower_kijun = 0.8

#params = {'objective': 'multiclass','num_class': 4,  'early_stopping_rounds':10, 'tree_learner': 'data'}

'''
params = {'objective': 'multiclass','num_class': 4,'boosting': 'dart',  'early_stopping_rounds':5,
          'learning_rate': 0.01, 'num_iterations': 100, 'max_depth':7, 'num_leaves': 80}

params = {'objective': 'binary','boosting': 'gbdt',  #'early_stopping_rounds':50,
          'learning_rate': 0.01, 'num_iterations': 3000, 'max_depth':8, 'num_leaves': 200}
          '''
params = {'objective': 'binary','boosting': 'gbdt', 'learning_rate': 0.65, 'num_iterations': 10000, 'max_depth':9, 'num_leaves':200 ,'verbose_eval':False,  'verbose':-1, 'early_stopping_rounds':50}
#params = {'objective': 'binary','boosting': 'gbdt', 'learning_rate': 0.65, 'num_iterations': 10000, 'max_depth':9, 'num_leaves':200 ,'verbose_eval':False,  'verbose':-1, 'early_stopping_rounds':50}


start = time.time()
#OneMinMarketData.initialize_for_bot(num_term, window_term, future_period, futurel_kijun, 30000)
OneMinMarketData.initialize_for_bot(num_term, window_term, future_period, futurel_kijun, 60000, 30000)
buy_points, sell_points = OneMinMarketData.calc_pl_ls_points(pl, ls, OneMinMarketData.ohlc)

lgbmodel = LgbModel()
train_size = 0.9
valid_size = 0.3
sdf = OneMinMarketData.generate_sell_points_df(sell_points)
bdf = OneMinMarketData.generate_buy_points_df(buy_points)
#train_xb, test_xb, train_yb, test_yb, valid_xb, valid_yb = lgbmodel.generate_bsp_data(bdf, 'buy', train_size, valid_size)
train_xb, test_xb, train_yb, test_yb, valid_xb, valid_yb = lgbmodel.generate_bsp_data_no_random(bdf, 'buy', train_size, valid_size)
#train_xs, test_xs, train_ys, test_ys, valid_xs, valid_ys = lgbmodel.generate_bsp_data(sdf, 'sell', train_size, valid_size)
train_xs, test_xs, train_ys, test_ys, valid_xs, valid_ys = lgbmodel.generate_bsp_data_no_random(sdf, 'sell', train_size, valid_size)
model_buy = lgbmodel.train_params_with_validations(train_xb, train_yb,valid_xb, valid_yb, params)
model_sell = lgbmodel.train_params_with_validations(train_xs, train_ys,valid_xs, valid_ys, params)

with open('/content/drive/My Drive/Model/lgb_model_buy.dat', 'wb') as f:
    pickle.dump(model_buy, f)
with open('/content/drive/My Drive/Model/lgb_model_sell.dat', 'wb') as f:
    pickle.dump(model_sell, f)

tp_buy = lgbmodel.bp_prediciton(model_buy, train_xb, pred_kijun)
tp_sell = lgbmodel.bp_prediciton(model_sell, train_xs, pred_kijun)
print('train accuracy buy={}'.format(lgbmodel.calc_bp_accuracy(tp_buy, train_yb)))
print('train accuracy sell={}'.format(lgbmodel.calc_bp_accuracy(tp_sell, train_ys)))

predictions_buy = lgbmodel.bp_prediciton(model_buy, test_xb, pred_kijun)
predictions_sell = lgbmodel.bp_prediciton(model_sell, test_xs, pred_kijun)
print('test accuracy buy={}'.format(lgbmodel.calc_bp_accuracy(predictions_buy, test_yb)))
print('test accuracy sell={}'.format(lgbmodel.calc_bp_accuracy(predictions_sell, test_ys)))
start_ind = OneMinMarketData.check_matched_index(test_xb)
predictions_buysell = lgbmodel.bp_buysell_prediction(predictions_buy, predictions_sell, upper_kijun, lower_kijun)
stdata = OneMinMarketData.generate_tick_pred_data(predictions_buysell, start_ind)
sim = Sim()
ac = SimAccount()
#    ac = sim.sim_bp(stdata, pl, ls, ac)
ac = sim.sim_buysell(stdata, pl, ls, ac)
print('total pl={},num trade={},win rate={}, pl_stability={}, num_buy={}, num_sell={}'.format(ac.total_pl,ac.num_trade,ac.win_rate, ac.pl_stability, ac.num_buy,ac.num_sell))
print('strategy performance={}'.format(ac.total_pl * ac.pl_stability))

fig, ax1 = plt.subplots()
plt.figure(figsize=(30,30),dpi=200)
ax1.plot(ac.performance_total_pl_log,color='red',linewidth = 3.0,label='pl')
ax2 = ax1.twinx()
ax2.plot(list(stdata.price))
plt.show()

xs = list(range(len(OneMinMarketData.ohlc.close)))
ys = OneMinMarketData.ohlc.close
markers_on = buy_points
plt.plot(xs, ys, '-gD', markevery=markers_on, color='blue', markeredgecolor='green')
plt.axvspan(0, int(len(sdf)*train_size), facecolor='#2ca02c', alpha=0.5)
plt.show()